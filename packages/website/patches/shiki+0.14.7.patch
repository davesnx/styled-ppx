diff --git a/node_modules/shiki/dist/index.js b/node_modules/shiki/dist/index.js
index 762b562..2459cef 100644
--- a/node_modules/shiki/dist/index.js
+++ b/node_modules/shiki/dist/index.js
@@ -2428,12 +2428,14 @@ function getThemeDefaultColors(theme) {
 }
 
 class Resolver {
-  constructor(onigLibPromise, onigLibName) {
+  _langs = new Map();
+  _scopeToLang = new Map();
+  _injections = new Map();
+  constructor(onigLibPromise, onigLibName, langs) {
     this.languagesPath = "languages/";
-    this.languageMap = {};
-    this.scopeToLangMap = {};
     this._onigLibPromise = onigLibPromise;
     this._onigLibName = onigLibName;
+    langs.forEach(i => this.addLanguage(i));
   }
   get onigLib() {
     return this._onigLibPromise;
@@ -2442,10 +2444,10 @@ class Resolver {
     return this._onigLibName;
   }
   getLangRegistration(langIdOrAlias) {
-    return this.languageMap[langIdOrAlias];
+    return this._langs.get(langIdOrAlias);
   }
   async loadGrammar(scopeName) {
-    const lang = this.scopeToLangMap[scopeName];
+    const lang = this._scopeToLang.get(scopeName);
     if (!lang) {
       return null;
     }
@@ -2459,14 +2461,30 @@ class Resolver {
     return g;
   }
   addLanguage(l) {
-    this.languageMap[l.id] = l;
+    this._langs.set(l.id, l);
     if (l.aliases) {
-      l.aliases.forEach((a) => {
-        this.languageMap[a] = l;
-      });
+        l.aliases.forEach((a) => {
+            this._langs.set(a, l);
+        });
+    }
+    this._scopeToLang.set(l.scopeName, l);
+    if (l.injectTo) {
+        l.injectTo.forEach((i) => {
+            if (!this._injections.get(i))
+                this._injections.set(i, []);
+            this._injections.get(i).push(l.scopeName);
+        });
     }
-    this.scopeToLangMap[l.scopeName] = l;
   }
+  getInjections(scopeName) {
+    const scopeParts = scopeName.split('.');
+    let injections = [];
+    for (let i = 1; i <= scopeParts.length; i++) {
+        const subScopeName = scopeParts.slice(0, i).join('.');
+        injections = [...injections, ...(this._injections.get(subScopeName) || [])];
+    }
+    return injections;
+}
 }
 
 function tokenizeWithTheme(theme, colorMap, fileContents, grammar, options) {
@@ -3138,7 +3156,7 @@ function generateDefaultColorReplacements() {
 }
 async function getHighlighter(options) {
   const { _languages, _themes, _wasmPath } = resolveOptions(options);
-  const _resolver = new Resolver(getOniguruma(_wasmPath), "vscode-oniguruma");
+  const _resolver = new Resolver(getOniguruma(_wasmPath), "vscode-oniguruma", _languages);
   const _registry = new Registry(_resolver);
   if (options.paths?.themes) {
     _registry.themesPath = options.paths.themes.endsWith("/") ? options.paths.themes : options.paths.themes + "/";
