// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "rescript/lib/es6/array.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_string from "rescript/lib/es6/caml_string.js";

function joinWith(sep, strings) {
  var _strings = strings;
  var _acc = "";
  while(true) {
    var acc = _acc;
    var strings$1 = _strings;
    if (!strings$1) {
      return acc;
    }
    var xs = strings$1.tl;
    var x = strings$1.hd;
    if (!xs) {
      return acc + x;
    }
    _acc = acc + x + sep;
    _strings = xs;
    continue ;
  };
}

var List = {
  map: Belt_List.map,
  reduceU: Belt_List.reduceU,
  reduce: Belt_List.reduce,
  toArray: $$Array.of_list,
  joinWith: joinWith
};

function joinWith$1(sep, strings) {
  var len = strings.length;
  var _i = 0;
  var _acc = "";
  while(true) {
    var acc = _acc;
    var i = _i;
    if (i >= len) {
      return acc;
    }
    if (i === (len - 1 | 0)) {
      return acc + Caml_array.get(strings, i);
    }
    _acc = acc + (Caml_array.get(strings, i) + sep);
    _i = i + 1 | 0;
    continue ;
  };
}

var $$Array$1 = {
  reduceU: Belt_Array.reduceU,
  reduceWithIndex: Belt_Array.reduceWithIndex,
  reduceWithIndexU: Belt_Array.reduceWithIndexU,
  reduce: Belt_Array.reduce,
  map: Belt_Array.map,
  joinWith: joinWith$1
};

var get = Caml_string.get;

function length(prim) {
  return prim.length;
}

var startsWith = Js_string.startsWith;

var $$String = {
  get: get,
  length: length,
  startsWith: startsWith
};

function toString(prim) {
  return prim.toString();
}

var Int = {
  toString: toString
};

function toString$1(prim) {
  return prim.toString();
}

var Float = {
  toString: toString$1
};

function getWithDefault($$default, opt) {
  if (opt !== undefined) {
    return Caml_option.valFromOption(opt);
  } else {
    return $$default;
  }
}

function mapWithDefault(opt, $$default, fn) {
  if (opt !== undefined) {
    return fn(Caml_option.valFromOption(opt));
  } else {
    return $$default;
  }
}

function map(f, opt) {
  if (opt !== undefined) {
    return Caml_option.some(f(Caml_option.valFromOption(opt)));
  }
  
}

var $$Option = {
  getWithDefault: getWithDefault,
  mapWithDefault: mapWithDefault,
  map: map
};

export {
  List ,
  $$Array$1 as $$Array,
  $$String ,
  Int ,
  Float ,
  $$Option ,
}
/* No side effect */
