  $ npx bsc -ppx "rewriter" -only-parse -bs-ast -bs-jsx 4 -bs-loc -bs-diagnose -bs-no-version-header -bs-ml-out -bs-no-builtin-ppx -bs-super-errors -color never -dsource input.res 2> output.ml

No clue why bsc generates a invalid syntax, but it does. This removes this particual bit.
  $ sed -e 's/.I1//g' output.ml > fixed.ml

  $ npx rescript convert fixed.ml

  $ cat fixed.res
  module DynamicComponent = {
    type props<'var> = {
      innerRef?: ReactDOM.domRef,
      children?: React.element,
      about?: string,
      accentHeight?: string,
      accept?: string,
      acceptCharset?: string,
      accessKey?: string,
      accumulate?: string,
      action?: string,
      additive?: string,
      alignmentBaseline?: string,
      allowFullScreen?: bool,
      allowReorder?: string,
      alphabetic?: string,
      alt?: string,
      amplitude?: string,
      arabicForm?: string,
      @as("aria-activedescendant") ariaActivedescendant?: string,
      @as("aria-atomic") ariaAtomic?: bool,
      @as("aria-busy") ariaBusy?: bool,
      @as("aria-colcount") ariaColcount?: int,
      @as("aria-colindex") ariaColindex?: int,
      @as("aria-colspan") ariaColspan?: int,
      @as("aria-controls") ariaControls?: string,
      @as("aria-describedby") ariaDescribedby?: string,
      @as("aria-details") ariaDetails?: string,
      @as("aria-disabled") ariaDisabled?: bool,
      @as("aria-errormessage") ariaErrormessage?: string,
      @as("aria-expanded") ariaExpanded?: bool,
      @as("aria-flowto") ariaFlowto?: string,
      @as("aria-grabbed") ariaGrabbed?: bool,
      @as("aria-hidden") ariaHidden?: bool,
      @as("aria-keyshortcuts") ariaKeyshortcuts?: string,
      @as("aria-label") ariaLabel?: string,
      @as("aria-labelledby") ariaLabelledby?: string,
      @as("aria-level") ariaLevel?: int,
      @as("aria-modal") ariaModal?: bool,
      @as("aria-multiline") ariaMultiline?: bool,
      @as("aria-multiselectable") ariaMultiselectable?: bool,
      @as("aria-owns") ariaOwns?: string,
      @as("aria-placeholder") ariaPlaceholder?: string,
      @as("aria-posinset") ariaPosinset?: int,
      @as("aria-readonly") ariaReadonly?: bool,
      @as("aria-relevant") ariaRelevant?: string,
      @as("aria-required") ariaRequired?: bool,
      @as("aria-roledescription") ariaRoledescription?: string,
      @as("aria-rowcount") ariaRowcount?: int,
      @as("aria-rowindex") ariaRowindex?: int,
      @as("aria-rowspan") ariaRowspan?: int,
      @as("aria-selected") ariaSelected?: bool,
      @as("aria-setsize") ariaSetsize?: int,
      @as("aria-sort") ariaSort?: string,
      @as("aria-valuemax") ariaValuemax?: float,
      @as("aria-valuemin") ariaValuemin?: float,
      @as("aria-valuenow") ariaValuenow?: float,
      @as("aria-valuetext") ariaValuetext?: string,
      ascent?: string,
      async?: bool,
      attributeName?: string,
      attributeType?: string,
      autoComplete?: string,
      autoFocus?: bool,
      autoPlay?: bool,
      autoReverse?: string,
      azimuth?: string,
      baseFrequency?: string,
      baselineShift?: string,
      baseProfile?: string,
      bbox?: string,
      begin_?: string,
      bias?: string,
      by?: string,
      calcMode?: string,
      capHeight?: string,
      challenge?: string,
      charSet?: string,
      checked?: bool,
      cite?: string,
      className?: string,
      clip?: string,
      clipPath?: string,
      clipPathUnits?: string,
      clipRule?: string,
      colorInterpolation?: string,
      colorInterpolationFilters?: string,
      colorProfile?: string,
      colorRendering?: string,
      cols?: int,
      colSpan?: int,
      content?: string,
      contentEditable?: bool,
      contentScriptType?: string,
      contentStyleType?: string,
      contextMenu?: string,
      controls?: bool,
      coords?: string,
      crossorigin?: bool,
      cursor?: string,
      cx?: string,
      cy?: string,
      d?: string,
      data?: string,
      datatype?: string,
      dateTime?: string,
      decelerate?: string,
      default?: bool,
      defaultChecked?: bool,
      defaultValue?: string,
      defer?: bool,
      descent?: string,
      diffuseConstant?: string,
      dir?: string,
      direction?: string,
      disabled?: bool,
      display?: string,
      divisor?: string,
      dominantBaseline?: string,
      download?: string,
      draggable?: bool,
      dur?: string,
      dx?: string,
      dy?: string,
      edgeMode?: string,
      elevation?: string,
      enableBackground?: string,
      encType?: string,
      end_?: string,
      exponent?: string,
      externalResourcesRequired?: string,
      fill?: string,
      fillOpacity?: string,
      fillRule?: string,
      filter?: string,
      filterRes?: string,
      filterUnits?: string,
      floodColor?: string,
      floodOpacity?: string,
      focusable?: string,
      fomat?: string,
      fontFamily?: string,
      fontSize?: string,
      fontSizeAdjust?: string,
      fontStretch?: string,
      fontStyle?: string,
      fontVariant?: string,
      fontWeight?: string,
      form?: string,
      formAction?: string,
      formMethod?: string,
      formTarget?: string,
      from?: string,
      fx?: string,
      fy?: string,
      g1?: string,
      g2?: string,
      glyphName?: string,
      glyphOrientationHorizontal?: string,
      glyphOrientationVertical?: string,
      glyphRef?: string,
      gradientTransform?: string,
      gradientUnits?: string,
      hanging?: string,
      headers?: string,
      height?: string,
      hidden?: bool,
      high?: int,
      horizAdvX?: string,
      horizOriginX?: string,
      href?: string,
      hrefLang?: string,
      htmlFor?: string,
      httpEquiv?: string,
      icon?: string,
      id?: string,
      ideographic?: string,
      imageRendering?: string,
      in_?: string,
      in2?: string,
      inlist?: string,
      inputMode?: string,
      integrity?: string,
      intercept?: string,
      itemID?: string,
      itemProp?: string,
      itemRef?: string,
      itemScope?: bool,
      itemType?: string,
      k?: string,
      k1?: string,
      k2?: string,
      k3?: string,
      k4?: string,
      kernelMatrix?: string,
      kernelUnitLength?: string,
      kerning?: string,
      key?: string,
      keyPoints?: string,
      keySplines?: string,
      keyTimes?: string,
      keyType?: string,
      kind?: string,
      label?: string,
      lang?: string,
      lengthAdjust?: string,
      letterSpacing?: string,
      lightingColor?: string,
      limitingConeAngle?: string,
      list?: string,
      local?: string,
      loop?: bool,
      low?: int,
      manifest?: string,
      markerEnd?: string,
      markerHeight?: string,
      markerMid?: string,
      markerStart?: string,
      markerUnits?: string,
      markerWidth?: string,
      mask?: string,
      maskContentUnits?: string,
      maskUnits?: string,
      mathematical?: string,
      max?: string,
      maxLength?: int,
      media?: string,
      mediaGroup?: string,
      min?: int,
      minLength?: int,
      mode?: string,
      multiple?: bool,
      muted?: bool,
      name?: string,
      nonce?: string,
      noValidate?: bool,
      numOctaves?: string,
      offset?: string,
      opacity?: string,
      open_?: bool,
      operator?: string,
      optimum?: int,
      order?: string,
      orient?: string,
      orientation?: string,
      origin?: string,
      overflow?: string,
      overflowX?: string,
      overflowY?: string,
      overlinePosition?: string,
      overlineThickness?: string,
      paintOrder?: string,
      panose1?: string,
      pathLength?: string,
      pattern?: string,
      patternContentUnits?: string,
      patternTransform?: string,
      patternUnits?: string,
      placeholder?: string,
      pointerEvents?: string,
      points?: string,
      pointsAtX?: string,
      pointsAtY?: string,
      pointsAtZ?: string,
      poster?: string,
      prefix?: string,
      preload?: string,
      preserveAlpha?: string,
      preserveAspectRatio?: string,
      primitiveUnits?: string,
      property?: string,
      r?: string,
      radioGroup?: string,
      radius?: string,
      readOnly?: bool,
      refX?: string,
      refY?: string,
      rel?: string,
      renderingIntent?: string,
      repeatCount?: string,
      repeatDur?: string,
      required?: bool,
      requiredExtensions?: string,
      requiredFeatures?: string,
      resource?: string,
      restart?: string,
      result?: string,
      reversed?: bool,
      role?: string,
      rotate?: string,
      rows?: int,
      rowSpan?: int,
      rx?: string,
      ry?: string,
      sandbox?: string,
      scale?: string,
      scope?: string,
      scoped?: bool,
      scrolling?: string,
      seed?: string,
      selected?: bool,
      shape?: string,
      shapeRendering?: string,
      size?: int,
      sizes?: string,
      slope?: string,
      spacing?: string,
      span?: int,
      specularConstant?: string,
      specularExponent?: string,
      speed?: string,
      spellCheck?: bool,
      spreadMethod?: string,
      src?: string,
      srcDoc?: string,
      srcLang?: string,
      srcSet?: string,
      start?: int,
      startOffset?: string,
      stdDeviation?: string,
      stemh?: string,
      stemv?: string,
      step?: float,
      stitchTiles?: string,
      stopColor?: string,
      stopOpacity?: string,
      strikethroughPosition?: string,
      strikethroughThickness?: string,
      stroke?: string,
      strokeDasharray?: string,
      strokeDashoffset?: string,
      strokeLinecap?: string,
      strokeLinejoin?: string,
      strokeMiterlimit?: string,
      strokeOpacity?: string,
      strokeWidth?: string,
      style?: ReactDOM.Style.t,
      summary?: string,
      suppressContentEditableWarning?: bool,
      surfaceScale?: string,
      systemLanguage?: string,
      tabIndex?: int,
      tableValues?: string,
      target?: string,
      targetX?: string,
      targetY?: string,
      textAnchor?: string,
      textDecoration?: string,
      textLength?: string,
      textRendering?: string,
      title?: string,
      to_?: string,
      transform?: string,
      @as("type") type_?: string,
      typeof?: string,
      u1?: string,
      u2?: string,
      underlinePosition?: string,
      underlineThickness?: string,
      unicode?: string,
      unicodeBidi?: string,
      unicodeRange?: string,
      unitsPerEm?: string,
      useMap?: string,
      vAlphabetic?: string,
      value?: string,
      values?: string,
      vectorEffect?: string,
      version?: string,
      vertAdvX?: string,
      vertAdvY?: string,
      vertOriginX?: string,
      vertOriginY?: string,
      vHanging?: string,
      vIdeographic?: string,
      viewBox?: string,
      viewTarget?: string,
      visibility?: string,
      vMathematical?: string,
      vocab?: string,
      width?: string,
      widths?: string,
      wordSpacing?: string,
      wrap?: string,
      writingMode?: string,
      x?: string,
      x1?: string,
      x2?: string,
      xChannelSelector?: string,
      xHeight?: string,
      xlinkActuate?: string,
      xlinkArcrole?: string,
      xlinkHref?: string,
      xlinkRole?: string,
      xlinkShow?: string,
      xlinkTitle?: string,
      xlinkType?: string,
      xmlBase?: string,
      xmlLang?: string,
      xmlns?: string,
      xmlnsXlink?: string,
      xmlSpace?: string,
      y?: string,
      y1?: string,
      y2?: string,
      yChannelSelector?: string,
      z?: string,
      zoomAndPan?: string,
      onAbort?: React.Event.Media.t => unit,
      onAnimationEnd?: React.Event.Animation.t => unit,
      onAnimationIteration?: React.Event.Animation.t => unit,
      onAnimationStart?: React.Event.Animation.t => unit,
      onBlur?: React.Event.Focus.t => unit,
      onCanPlay?: React.Event.Media.t => unit,
      onCanPlayThrough?: React.Event.Media.t => unit,
      onChange?: React.Event.Form.t => unit,
      onClick?: React.Event.Mouse.t => unit,
      onCompositionEnd?: React.Event.Composition.t => unit,
      onCompositionStart?: React.Event.Composition.t => unit,
      onCompositionUpdate?: React.Event.Composition.t => unit,
      onContextMenu?: React.Event.Mouse.t => unit,
      onCopy?: React.Event.Clipboard.t => unit,
      onCut?: React.Event.Clipboard.t => unit,
      onDoubleClick?: React.Event.Mouse.t => unit,
      onDrag?: React.Event.Mouse.t => unit,
      onDragEnd?: React.Event.Mouse.t => unit,
      onDragEnter?: React.Event.Mouse.t => unit,
      onDragExit?: React.Event.Mouse.t => unit,
      onDragLeave?: React.Event.Mouse.t => unit,
      onDragOver?: React.Event.Mouse.t => unit,
      onDragStart?: React.Event.Mouse.t => unit,
      onDrop?: React.Event.Mouse.t => unit,
      onDurationChange?: React.Event.Media.t => unit,
      onEmptied?: React.Event.Media.t => unit,
      onEncrypetd?: React.Event.Media.t => unit,
      onEnded?: React.Event.Media.t => unit,
      onError?: React.Event.Media.t => unit,
      onFocus?: React.Event.Focus.t => unit,
      onInput?: React.Event.Form.t => unit,
      onKeyDown?: React.Event.Keyboard.t => unit,
      onKeyPress?: React.Event.Keyboard.t => unit,
      onKeyUp?: React.Event.Keyboard.t => unit,
      onLoadedData?: React.Event.Media.t => unit,
      onLoadedMetadata?: React.Event.Media.t => unit,
      onLoadStart?: React.Event.Media.t => unit,
      onMouseDown?: React.Event.Mouse.t => unit,
      onMouseEnter?: React.Event.Mouse.t => unit,
      onMouseLeave?: React.Event.Mouse.t => unit,
      onMouseMove?: React.Event.Mouse.t => unit,
      onMouseOut?: React.Event.Mouse.t => unit,
      onMouseOver?: React.Event.Mouse.t => unit,
      onMouseUp?: React.Event.Mouse.t => unit,
      onPaste?: React.Event.Clipboard.t => unit,
      onPause?: React.Event.Media.t => unit,
      onPlay?: React.Event.Media.t => unit,
      onPlaying?: React.Event.Media.t => unit,
      onProgress?: React.Event.Media.t => unit,
      onRateChange?: React.Event.Media.t => unit,
      onScroll?: React.Event.UI.t => unit,
      onSeeked?: React.Event.Media.t => unit,
      onSeeking?: React.Event.Media.t => unit,
      onSelect?: React.Event.Selection.t => unit,
      onStalled?: React.Event.Media.t => unit,
      onSubmit?: React.Event.Form.t => unit,
      onSuspend?: React.Event.Media.t => unit,
      onTimeUpdate?: React.Event.Media.t => unit,
      onTouchCancel?: React.Event.Touch.t => unit,
      onTouchEnd?: React.Event.Touch.t => unit,
      onTouchMove?: React.Event.Touch.t => unit,
      onTouchStart?: React.Event.Touch.t => unit,
      onTransitionEnd?: React.Event.Transition.t => unit,
      onVolumeChange?: React.Event.Media.t => unit,
      onWaiting?: React.Event.Media.t => unit,
      onWheel?: React.Event.Wheel.t => unit,
      var: 'var,
    }
    @module("react") external createVariadicElement: (string, {..}) => React.element = "createElement"
    let deleteProp = %raw("(newProps, key) => delete newProps[key]")
    let getOrEmpty = str =>
      switch str {
      | Some(str) => " " ++ str
      | None => ""
      }
    @val external assign2: ({..}, {..}, {..}) => {..} = "Object.assign"
    let styles = (~var, _) =>
      CssJs.style([
        CssJs.label("DynamicComponent"),
        (CssJs.color(var): CssJs.rule),
        CssJs.display(#flex),
      ])
    let make = (props: props<'var>) => {
      let className = styles(~var=props.var, ()) ++ getOrEmpty(props.className)
      let stylesObject = {"className": className, "ref": props.innerRef}
      let newProps = assign2(Js.Obj.empty(), Obj.magic(props), stylesObject)
      ignore(deleteProp(. newProps, "var"))
      ignore(deleteProp(. newProps, "innerRef"))
      createVariadicElement("div", newProps)
    }
  }
