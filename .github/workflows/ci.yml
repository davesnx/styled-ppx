name: Ppx CI

on:
  push:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # Missing windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Install esy
        run: npm install -g esy@0.6.12

      - name: Restore global cache (~/.esy/source)
        id: global-cache
        uses: actions/cache/restore@v3
        with:
          path: ~/.esy/source
          key: esy-source-${{ matrix.os }}-${{ hashFiles('esy.lock/index.json') }}

      - name: Print esy cache
        id: print_esy_cache
        run: echo "ESY_CACHE=$(node .github/workflows/print-esy-cache.js)" >> $GITHUB_OUTPUT

      - name: Load dependencies cache
        id: deps-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ steps.print_esy_cache.outputs.ESY_CACHE }}
            _export
          key: esy-deps-${{ matrix.os }}-${{ hashFiles('esy.lock/index.json') }}
          restore-keys: esy-${{ matrix.os }}-

      - name: Install dependencies
        run: esy install

      - name: Import dependencies
        if: steps.deps-cache.outputs.cache-hit == 'true'
        run: |
          esy import-dependencies _export
          rm -rf _export

      - name: Build dependencies
        run: esy build-dependencies

      - name: Build
        run: esy build

      - name: Test ppx snapshot
        run: esy test_ppx_snapshot

      - name: Test Typecheck
        run: esy test_typecheck

      - name: Test CSS Support
        run: esy test_css_support

      - name: Test CSS Lexer
        run: esy test_css_lexer

      - name: Test CSS Parser
        run: esy test_parser

      - name: Test CSS Parser
        run: esy test_reason_css_parser

      - name: Test CSS Spec Parser
        run: esy test_css_spec_parser

      - name: Test CSS Spec type generation
        run: esy test_css_spec_types

      - name: Test string interpolation
        run: esy dune runtest

      - name: Export dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: esy export-dependencies

      - name: Save global cache
        uses: actions/cache/save@v3
        if: steps.global-cache.outputs.cache-hit != 'true'
        with:
          path: ~/.esy/source
          key: esy-source-${{ matrix.os }}-${{ hashFiles('esy.lock/index.json') }}

      - name: Save dependencies cache
        if: steps.deps-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ steps.print_esy_cache.outputs.ESY_CACHE }}
            _export
          key: esy-deps-${{ matrix.os }}-${{ hashFiles('esy.lock/index.json') }}

      - name: Release static
        run: esy release-static

      - name: Upload artifacts for ${{ matrix.os }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: _build/default/bin/bin.exe

      # Cleanup build cache in case dependencies have changed
      - name: Cleanup
        run: esy cleanup .

  e2e:
    name: Browser tests
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: _build/default/bin

      - name: Grant permission to run ppx
        run: chmod +x _build/default/bin/bin.exe

      - name: Get cache directory path
        id: yarn-cache-dir-path
        working-directory: ./e2e/rescript-v9-JSX3
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Load global cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ matrix.os }}-${{ hashFiles('./e2e/yarn.lock') }}
          restore-keys: yarn-${{ matrix.os }}-

      - name: Install dependencies
        working-directory: ./e2e/rescript-v9-JSX3
        run: yarn

      - name: Test
        working-directory: ./e2e/rescript-v9-JSX3
        run: yarn test

  publish:
    name: Publish
    needs: build
    if: github.repository_owner == 'davesnx'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Make NPM release skeleton
        run: node scripts/release-make-skeleton.js

      - name: Print short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest
          path: _release/platform-linux-x64

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest
          path: _release/platform-darwin-x64

      # - name: Download windows artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: windows-latest
      #     path: _release/platform-windows-x64

      - name: Create archives for Github release
        run: |
          cd _release/platform-linux-x64
          zip -r ../../styled-ppx-linux-x64.zip .
          cd ../..

          cd _release/platform-darwin-x64
          zip -r ../../styled-ppx-darwin-x64.zip .
          cd ../..

          # cd _release/platform-windows-x64
          # zip -r ../../styled-ppx-windows-x64.zip .
          # cd ../..

      - name: Create Github release
        id: create_release
        if: "startsWith(github.ref, 'refs/tags/v')"
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload styled-ppx-darwin-x64.zip to Github release
        if: "startsWith(github.ref, 'refs/tags/v')"
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: styled-ppx-darwin-x64.zip
          asset_name: styled-ppx-darwin-x64.zip
          asset_content_type: application/gzip

      - name: Upload styled-ppx-linux-x64.zip to Github release
        if: "startsWith(github.ref, 'refs/tags/v')"
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: styled-ppx-linux-x64.zip
          asset_name: styled-ppx-linux-x64.zip
          asset_content_type: application/gzip

      # - name: Upload styled-ppx-windows-x64.zip to Github release
      #   if: github.ref != 'refs/heads/master'
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: styled-ppx-windows-x64.zip
      #     asset_name: styled-ppx-windows-x64.zip
      #     asset_content_type: application/gzip

      - name: Release nightly NPM package
        if: ${{ success() && github.event_name == 'pull_request' && github.event.pull_request.user.login == 'davesnx' }}
        id: nightly
        working-directory: ./_release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm config set scope "@davesnx"
          npm version prerelease --preid ${{ steps.sha.outputs.sha_short }} -no-git-tag-version
          npm publish --access public --tag nightly
          echo "version=$(npm view @davesnx/styled-ppx@nightly version)" >> $GITHUB_OUTPUT

      - name: Release NPM package
        if: ${{ success() && github.event_name != 'pull_request' }}
        working-directory: ./_release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm config set scope "@davesnx"
          REMOTE=$(npm view @davesnx/styled-ppx version)
          CURRENT=$(jq -r '.version' package.json)
          if [ "$REMOTE" != "$CURRENT" ]
          then
              npm publish --access public
          else
              echo "New verison and remote version are equal, nothing to publish"
          fi

      - uses: mshick/add-pr-comment@v1
        if: ${{ steps.nightly.outputs.version }}
        with:
          message: |
            New **nightly** version has been published to the NPM registry: [@davesnx/styled-ppx@${{ steps.nightly.outputs.version }}](https://www.npmjs.com/package/@davesnx/styled-ppx/v/${{ steps.nightly.outputs.version }}).
            Install it with `npm install @davesnx/styled-ppx@nightly` or `npm install @davesnx/styled-ppx@${{ steps.nightly.outputs.version }}`.
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: false
